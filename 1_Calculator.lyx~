#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introducing simple calculations and scripts
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

opts_chunk$set(cache.path = './cache/Calculator/',
\end_layout

\begin_layout Plain Layout

               fig.path   = './figure/Calculator/')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
R is a open-source program that is commonly used in Statistics.
 It runs on almost every platform and is completely free and is available
 at 
\begin_inset CommandInset href
LatexCommand href
name "r-project.org"
target "www.r-project.org"

\end_inset

.
 Most of the cutting-edge statistical research is first available on R.
 
\end_layout

\begin_layout Standard
R is a script based language, so there is no point and click interface.
 (Actually there are packages that attempt to provide a point and click
 interface, but they are still somewhat primitive.) While the initial learning
 curve will be steeper, understanding how to write scripts will be valuable
 because it leaves a clear description of what steps you performed in your
 data analysis.
 Typically you will want to write a script in a separate file and then run
 individual lines.
 The saves you from having to retype a bunch of commands and speeds up the
 debugging process.
\end_layout

\begin_layout Standard
This document is a very brief introduction to using R in my course.
 I highly recommend downloading and reading/skimming the manual 
\emph on

\begin_inset Quotes eld
\end_inset

An Introduction to R
\begin_inset Quotes erd
\end_inset


\emph default
 which is located at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://cran.r-project.org/doc/manuals/R-intro.pdf
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Finding help about a certain function is very easy.
 At the prompt, just type 
\family typewriter
help(function.name)
\family default
 or 
\family typewriter
?function.name
\family default
.
 If you don't know the name of the function, your best bet is to go the
 the web page 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

www.rseek.org
\end_layout

\end_inset

 which will search various R resources for your keyword(s).
 Another great resource is the coding question and answer site 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

stackoverflow.com
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The basic editor that comes with R works fairly well, but you should consider
 running R through the program
\series bold
 
\series default
RStudio which is located at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.rstudio.org
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The prompt 
\family typewriter
>
\family default
 is waiting for you to input a command.
 The prompt 
\family typewriter
+
\family default
 tells you that the current command is spanning multiple lines.
 In a script file you might have typed something like this:
\end_layout

\begin_layout Quote

\family typewriter
for( i in 1:5 ){
\begin_inset Newline newline
\end_inset

print(i)
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Standard
But when you copy and paste it into the console in R you'll see something
 like this:
\end_layout

\begin_layout Quote

\family typewriter
> for (i in 1:5) { 
\begin_inset Newline newline
\end_inset

+ print(i) 
\begin_inset Newline newline
\end_inset

+ }
\end_layout

\begin_layout Standard
If you type your commands into a file, you won't type the > or + prompts.
 For the rest of the tutorial, I will show the code as you would type it
 into a script and I will show the output being shown with two hashtags
 (##) before it to designate that it is output.
\end_layout

\begin_layout Standard
When doing anything more difficult than simple algebra, you should write
 your commands in a script instead of directly to the console.
 The reason why is that unless you are a perfect typist and never make a
 mistake, creating a script file with the correct commands will save a massive
 amount of re-typing.
 Furthermore, having a script file fully documents how you did your analysis,
 which can help when writing the methods section of a paper.
 Finally, having a script makes it easy to re-run an analysis after a change
 in the data (additional data values, transformed data, or removal of outliers).
\end_layout

\begin_layout Standard
It often makes your script more readable if you break a single command up
 into multiple lines.
 R will disregard all whitespace (including line breaks) so you can safely
 spread your command over as multiple lines.
 Finally, it is useful to leave comments in the script for things such as
 explaining a tricky step, who wrote the code and when, or why you chose
 a particular name for a variable.
 The 
\family typewriter
#
\family default
 sign will denote that the rest of the line is a comment and R will ignore
 it.
\end_layout

\begin_layout Section
R as a simple calculator
\end_layout

\begin_layout Standard
Assuming that you have started R on whatever platform you like, you can
 use R as a simple calculator.
 At the prompt, type 
\family typewriter
2+3
\family default
 and hit enter.
 What you should see is the following:
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

# Some simple addition
\end_layout

\begin_layout Plain Layout

2+3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this fashion you can use R as a very capable calculator.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

6*8
\end_layout

\begin_layout Plain Layout

4^3
\end_layout

\begin_layout Plain Layout

exp(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
R has most constants and common mathematical functions you could ever want.
 
\family typewriter
sin()
\family default
, 
\family typewriter
cos()
\family default
, and other trigonometry functions are available, as are the exponential
 and log functions 
\family typewriter
exp()
\family default
, 
\family typewriter
log()
\family default
.
 The absolute value is given by 
\family typewriter
abs()
\family default
, and 
\family typewriter
round()
\family default
 will round a value to the nearest integer.
 
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

pi
\end_layout

\begin_layout Plain Layout

sin(0)
\end_layout

\begin_layout Plain Layout

log(5)  # Unless you specify the base, R will assume base e
\end_layout

\begin_layout Plain Layout

log(5, base=10)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Whenever I call a function, there will be some arguments that are mandatory,
 and some that are optional and the arguments are separated by a comma.
 In the above statements the function 
\family typewriter
log()
\family default
 requires at least one argument, and that is the number(s) to take the log
 of.
 However, the 
\family typewriter
base
\family default
 argument is optional.
 If you do not specify what base to use, R will use a default value.
 You can see that R will default to using base 
\begin_inset Formula $e$
\end_inset

 by looking at the help page (by typing 
\family typewriter
help(log)
\family default
 or 
\family typewriter
?log
\family default
 at the command prompt).
\end_layout

\begin_layout Standard
Arguments can be specified via the order in which they are passed or by
 naming the arguments.
 So for the 
\family typewriter
log()
\family default
 function which has arguments 
\family typewriter
log(x, base=exp(1))
\family default
.
 If I specify which arguments are which using the named values, then order
 doesn't matter.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

# Demonstrating order does not matter if you specify 
\end_layout

\begin_layout Plain Layout

# which argument is which
\end_layout

\begin_layout Plain Layout

log(x=5, base=10)   
\end_layout

\begin_layout Plain Layout

log(base=10, x=5)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
But if we don't specify which argument is which, R will decide that 
\family typewriter
x
\family default
 is the first argument, and 
\family typewriter
base
\family default
 is the second.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

# If not specified, R will assume the second value is the base...
\end_layout

\begin_layout Plain Layout

log(5, 10)
\end_layout

\begin_layout Plain Layout

log(10, 5)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When I specify the arguments, I have been using the 
\family typewriter
name=value
\family default
 notation and a student might be tempted to use the 
\family typewriter
<-
\family default
 notation here
\begin_inset Foot
status open

\begin_layout Plain Layout
See next section.
\end_layout

\end_inset

.
 Don't do that as the 
\family typewriter
name=value 
\family default
notation is making an association mapping and not a permanent assignment.
\end_layout

\begin_layout Section
Assignment
\end_layout

\begin_layout Standard
We need to be able to assign a value to a variable to be able to use it
 later.
 R does this by using an arrow '
\family typewriter
<-
\family default
' or an equal sign 
\family typewriter
'='
\family default
.
 While R supports either, for readability, I suggest people pick one assignment
 operator and stick with it.
 I personally prefer to use the arrow.
 Variable names cannot start with a number, may not include spaces, and
 are case sensitive.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

tau <- 2*pi
\end_layout

\begin_layout Plain Layout

my.test.var = 5
\end_layout

\begin_layout Plain Layout

tau
\end_layout

\begin_layout Plain Layout

my.test.var
\end_layout

\begin_layout Plain Layout

tau * my.test.var
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As your analysis gets more complicated, you'll want to save the results
 to a variable so that you can access the results later
\emph on

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
To paraphrase Beyonce, 
\begin_inset Quotes eld
\end_inset

Cause if you liked it, then you should have put a name on it.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\emph default
.
 
\emph on
If you don't assign the result to a variable, you have no way of accessing
 the result.

\emph default
 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This isn't strictly true, the variable 
\family typewriter
.Last.value
\family default
 always has the result of the last expression evaluated, but you can't go
 any farther back.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Scripts and RMarkdown
\end_layout

\begin_layout Standard
One of the worst things about a pocket calculator is there is no good way
 to go several steps and easily see what you did or fix a mistake (there
 is nothing more annoying than re-typing something because of a typo.
 To avoid these issues I always work with script (or RMarkdown) files instead
 of typing directly into the console.
 You will quickly learn that it is impossible to write R code correctly
 the first time and you'll save yourself a huge amount of work by just embracing
 scripts (and RMarkdown) from the beginning.
\end_layout

\begin_layout Subsection
R Scripts (.R files)
\end_layout

\begin_layout Standard
The first type of file that we'll discuss is a traditional script file.
 To create a new 
\family typewriter
.R
\family default
 script in RStudio go to 
\family typewriter
File -> New File -> R Script
\family default
.
 This opens a new window in RStudio where you can type commands and functions
 as a common text editor.
 Type whatever you like in the script window and then you can execute the
 code line by line (using the run button or its keyboard shortcut to run
 the highlighted region or whatever line the curser is on) or the entire
 script (using the source button).
 Other options for what piece of code to run are available under the 
\family typewriter
Code
\family default
 dropdown box.
\end_layout

\begin_layout Standard
An R script for a homework assignment might look something like this:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

# Problem 1 
\end_layout

\begin_layout Plain Layout

# Calculate the log of a couple of values and make a plot
\end_layout

\begin_layout Plain Layout

# of the log function from 0 to 3
\end_layout

\begin_layout Plain Layout

log(0)
\end_layout

\begin_layout Plain Layout

log(1)
\end_layout

\begin_layout Plain Layout

log(2)
\end_layout

\begin_layout Plain Layout

x <- seq(.1,3, length=1000)
\end_layout

\begin_layout Plain Layout

plot(x, log(x))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Problem 2
\end_layout

\begin_layout Plain Layout

# Calculate the exponential function of a couple of values
\end_layout

\begin_layout Plain Layout

# and make a plot of the function from -2 to 2
\end_layout

\begin_layout Plain Layout

exp(-2)
\end_layout

\begin_layout Plain Layout

exp(0)
\end_layout

\begin_layout Plain Layout

exp(2)
\end_layout

\begin_layout Plain Layout

x <- seq(-2, 2, length=1000)
\end_layout

\begin_layout Plain Layout

plot(x, exp(x))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

This looks perfectly acceptable as a way of documenting what you did, but
 this script file doesn't contain the actual results of commands I ran,
 nor does it show you the plots.
 Also anytime I want to commend on some output, it needs to be offset with
 the commenting character 
\family typewriter
#
\family default
.
 It would be nice to have both the commands 
\emph on
and the results
\emph default
 merged into one document.
 This is what the 
\family typewriter
R Markdown
\family default
 file does for us.
\end_layout

\begin_layout Subsection
R Markdown (.Rmd files)
\end_layout

\begin_layout Standard
When I was a graduate student, I had to tediously copy and past tables of
 output from the R console and figures I had made into my Microsoft Word
 document.
 Far too often I would realize I had made a small mistake in part (b) of
 a problem and would have to go back, correct my mistake, and then redo
 all the laborious copying.
 I often wished that I could write both the code for my statistical analysis
 and the long discussion about the interpretation all in the same document
 so that I could just re-run the analysis with a click of a button and all
 the tables and figures would be updated by magic.
 Fortunately that magic
\begin_inset Foot
status open

\begin_layout Plain Layout
Clark's third law states 
\begin_inset Quotes eld
\end_inset

Any sufficiently advanced technology is indistinguishable from magic.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

 now exists.
\end_layout

\begin_layout Standard
To create a new 
\family typewriter
R Markdown
\family default
 document, we use the 
\family typewriter
File -> New File -> R Markdown...

\family default
 dropdown option and a menu will appear asking you for the document title,
 author, and preferred output type.
 In order to create a PDF, you'll need to have LaTeX installed, but the
 HTML output nearly always works and I've had good luck with the MS Word
 output as well.
\end_layout

\begin_layout Standard
The 
\family typewriter
R Markdown
\family default
 is an implementation of the 
\family typewriter
Markdown
\family default
 syntax that makes it extremely easy to write webpages and give instructions
 for how to do typesetting sorts of things.
 This syntax was extended to allow use to embed R commands directly into
 the document.
 Perhaps the easiest way to understand the syntax is to look at an example:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

---
\end_layout

\begin_layout Plain Layout

output: word_document
\end_layout

\begin_layout Plain Layout

---
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Problem 1# 
\end_layout

\begin_layout Plain Layout

Calculate the log of a couple of values and make a plot of 
\end_layout

\begin_layout Plain Layout

the log function from 0 to 3.
 First we will calculate some values...
\end_layout

\begin_layout Plain Layout

```{r}
\end_layout

\begin_layout Plain Layout

log(0)
\end_layout

\begin_layout Plain Layout

log(1)
\end_layout

\begin_layout Plain Layout

log(2)
\end_layout

\begin_layout Plain Layout

```
\end_layout

\begin_layout Plain Layout

Notice that log(0) is equal to -infinity and log(1) == 0.
 Next we'll make a nice plot.
\end_layout

\begin_layout Plain Layout

```{r, fig.height=2, fig.width=4}
\end_layout

\begin_layout Plain Layout

x <- seq(.1,3, length=1000)
\end_layout

\begin_layout Plain Layout

plot(x, log(x))
\end_layout

\begin_layout Plain Layout

```
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Notice that this function is only defined for positive values of X and 
\end_layout

\begin_layout Plain Layout

is monotonically increasing from -infinity to +infinity as X goes from 0
 to infinity.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Problem 2#
\end_layout

\begin_layout Plain Layout

Calculate the exponential function of a couple of values and make a 
\end_layout

\begin_layout Plain Layout

plot of the function from -2 to 2.
\end_layout

\begin_layout Plain Layout

```{r}
\end_layout

\begin_layout Plain Layout

exp(-2)
\end_layout

\begin_layout Plain Layout

exp(0)
\end_layout

\begin_layout Plain Layout

exp(2)
\end_layout

\begin_layout Plain Layout

```
\end_layout

\begin_layout Plain Layout

The most important of these is to notice that e^0=1.
 Next we'll make a nice plot
\end_layout

\begin_layout Plain Layout

```{r}
\end_layout

\begin_layout Plain Layout

x <- seq(-2, 2, length=1000)
\end_layout

\begin_layout Plain Layout

plot(x, exp(x))
\end_layout

\begin_layout Plain Layout

```
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Notice that this function is also monotonically increasing but now the X
\end_layout

\begin_layout Plain Layout

range is -infinity to +infinity while the output lives in [0, infinity).
 
\end_layout

\begin_layout Plain Layout

This is because the log and exponential functions are inverses of each other.
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

The R code in my document is nicely separated from my regular text using
 the three backticks and an instruction that it is R code that needs to
 be evaluated.
 The output of this document looks good as a HTML, PDF, or MS Word document.
\end_layout

\begin_layout Standard
This template is sufficient to get a student through STA 570 and its lab
 section, but more information about 
\family typewriter
Markdown
\family default
 syntax and all of its different tricks can be found online.
 In particular, I've found the following links to be quite useful.
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://daringfireball.net/projects/markdown/syntax
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://markdown-guide.readthedocs.org/en/latest/basics.html
\end_layout

\end_inset


\end_layout

\begin_layout Section
Packages
\end_layout

\begin_layout Standard
The packages in R are perhaps the best reason for learning R.
 There are thousands of packages available for free and most new analysis
 methods will be available as an R package long before they are available
 on any other computing platform.
 Statistical researchers who develop new methodology want to make their
 methods widely available to researchers and the R package system makes
 that relatively painless (and free!).
 
\end_layout

\begin_layout Standard
Users will typically download their desired packages from the Comprehensive
 R Archive Network (CRAN) which is a network of servers (typically called
 
\begin_inset Quotes eld
\end_inset

mirrors
\begin_inset Quotes erd
\end_inset

) that have all the packages that have been submitted.
 So to download a package, say the package 
\family typewriter
Lock5Data
\family default
, we just need to tell R to download it from a nearby CRAN mirror.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

install.packages('Lock5Data', repos='https://cran.cnr.berkeley.edu/') 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

If you are using RStudio, it is often much easier to download the package
 using the GUI interface by clicking 
\family typewriter
Tools -> Install packages...
\family default
.
 
\end_layout

\begin_layout Standard
Once a package is downloaded to your computer, it is not yet available.
 Because a computer might have hundreds or thousands of packages installed,
 you must load the package into working memory to be able to access the
 functions and data in the package.
 You must do this 
\emph on
every
\emph default
 time you start up R.
 As a result most Rmarkdown files and R scripts will begin with the process
 of loading the packages that we need for that analysis.
 In my notes, I often will start the chapter by loading the necessary libraries.
 You can load the library where ever you want in the script, but recognize
 that when knitting a RMarkdown file, a completely new session of R is started
 and you must have the commands loading the library placed above where you
 use the library.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

library(Lock5Data)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once the package is loaded using the 
\family typewriter
library()
\family default
 command, all the functions are accessible.
 While most packages will also load their datasets automatically, some packages
 have so many large datasets that the package authors turned that behavior
 off.
 Instead they might require you to explicitly load a dataset using the following
:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

data(ACS)   # load the ACS dataset included in the Lock5Data package.
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercises
\end_layout

\begin_layout Standard
Create an RMarkdown file that solves the following exercises.
\end_layout

\begin_layout Enumerate
Calculate 
\begin_inset Formula $\log\left(6.2\right)$
\end_inset

 first using base 
\begin_inset Formula $e$
\end_inset

 and second using base 10.
 To figure out how to do different bases, it might be helpful to look at
 the help page for the 
\family typewriter
log
\family default
 function.
\end_layout

\begin_layout Enumerate
Calculate the square root of 
\begin_inset Formula $2$
\end_inset

 and save the result as the variable named 
\family typewriter
sqrt2
\family default
.
 Have R display the decimal value of 
\family typewriter
sqrt2
\family default
.
\end_layout

\end_body
\end_document
