#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Flow Control Structures
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

opts_chunk$set(cache.path = './cache/FlowControl/',
\end_layout

\begin_layout Plain Layout

               fig.path   = './figure/FlowControl/')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Often it is necessary to write scripts that perform different action depending
 on the data or to automate a task that must be repeated many times.
 To address these issues we will introduce the 
\family typewriter
if
\family default
 statement and its closely related cousin 
\family typewriter
if else
\family default
.
 To address repeated tasks we will define two types of loops, a 
\family typewriter
while
\family default
 loop and a 
\family typewriter
for
\family default
 loop.
 
\end_layout

\begin_layout Section
Decision statements
\end_layout

\begin_layout Standard
An 
\family typewriter
if
\family default
 statement takes on the following two formats
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

# Simplest version
\end_layout

\begin_layout Plain Layout

if( logical ){
\end_layout

\begin_layout Plain Layout

  expression
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Including the optional else
\end_layout

\begin_layout Plain Layout

if( logical ){
\end_layout

\begin_layout Plain Layout

  expression
\end_layout

\begin_layout Plain Layout

}else{
\end_layout

\begin_layout Plain Layout

  expression
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

where the 
\family typewriter
else
\family default
 part is optional.
 
\end_layout

\begin_layout Standard
Suppose that I have a piece of code that generates a random variable from
 the Binomial distribution with one sample (essentially just flipping a
 coin) but I'd like to label it head or tails instead of one or zero.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

# Flip the coin, and we get a 0 or 1
\end_layout

\begin_layout Plain Layout

result <- rbinom(n=1, size=1, prob=0.5)
\end_layout

\begin_layout Plain Layout

result
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# convert the 0/1 to Tail/Head
\end_layout

\begin_layout Plain Layout

if( result == 0 ){
\end_layout

\begin_layout Plain Layout

  result <- 'Tail'
\end_layout

\begin_layout Plain Layout

}else{
\end_layout

\begin_layout Plain Layout

  result <- 'Head'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

result
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

What is happening is that the test expression inside the 
\family typewriter
if()
\family default
 is evaluated and if it is true, then the subsequent statement is executed.
 If the test expression is false, the next statement is skipped.
 The way the R language is defined, only the first statement after the 
\family typewriter
if
\family default
 statement is executed (or skipped) depending on the test expression.
 If we want multiple statements to be executed (or skipped), we will wrap
 those expressions in curly brackets 
\family typewriter
{}
\family default
.
 I find it easier to follow the 
\family typewriter
if else
\family default
 logic when I see the curly brackets so I use them even when there is only
 one expression to be executed.
 Also notice that the RStudio editor indents the code that might be skipped
 to try help give you a hint that it will be conditionally evaluated.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

# Flip the coin, and we get a 0 or 1
\end_layout

\begin_layout Plain Layout

result <- rbinom(n=1, size=1, prob=0.5)
\end_layout

\begin_layout Plain Layout

result
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# convert the 0/1 to Tail/Head
\end_layout

\begin_layout Plain Layout

if( result == 0 ){
\end_layout

\begin_layout Plain Layout

  result <- 'Tail'
\end_layout

\begin_layout Plain Layout

  print(" in the if statement, got a Tail! ")
\end_layout

\begin_layout Plain Layout

}else{
\end_layout

\begin_layout Plain Layout

  result <- 'Head'
\end_layout

\begin_layout Plain Layout

  print("In the else part!") 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

result
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are cases where you have two alternative routes of computation.
 Instead of writing two 
\family typewriter
if
\family default
 statements you could use the 
\family typewriter
if else
\family default
 construct.
 This will evaluate the test expression and, if true, execute the statement
 following the 
\family typewriter
if
\family default
.
 If the test expression is false, it will execute the statement in the 
\family typewriter
else
\family default
 section.
\end_layout

\begin_layout Standard
Finally we can nest 
\family typewriter
if else
\family default
 statements together to allow you to write code that has many different
 execution routes.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

# randomly grab a number between 0,5 and round it up to 1,2, ..., 5
\end_layout

\begin_layout Plain Layout

birth.order <- ceiling( runif(1, 0,5) )  
\end_layout

\begin_layout Plain Layout

if( birth.order == 1 ){
\end_layout

\begin_layout Plain Layout

  print('The first child had more rules to follow')
\end_layout

\begin_layout Plain Layout

}else if( birth.order == 2 ){
\end_layout

\begin_layout Plain Layout

  print('The second child was ignored')
\end_layout

\begin_layout Plain Layout

}else if( birth.order == 3 ){
\end_layout

\begin_layout Plain Layout

  print('The third child was spoiled')
\end_layout

\begin_layout Plain Layout

}else{
\end_layout

\begin_layout Plain Layout

  # if birth.order is anything other than 1, 2 or 3
\end_layout

\begin_layout Plain Layout

  print('No more unfounded generalizations!')
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To provide a more statistically interesting example of when we might use
 an 
\family typewriter
if
\family default
 
\family typewriter
else
\family default
 statement, consider the calculation of a p-value in a 1-sample t-test with
 a two-sided alternative.
 Recall the calculate was:
\end_layout

\begin_layout Itemize
If the test statistic 
\begin_inset Formula $t$
\end_inset

 is negative, then 
\begin_inset Formula $p-value=2*P\left(T_{df}<t\right)$
\end_inset


\end_layout

\begin_layout Itemize
If the test statistic 
\begin_inset Formula $t$
\end_inset

 is positive, then 
\begin_inset Formula $p-vlaue=2*P\left(T_{df}>t\right)$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

# create some fake data
\end_layout

\begin_layout Plain Layout

n  <- 20   # suppose this had a sample size of 20
\end_layout

\begin_layout Plain Layout

x  <- rnorm(n, mean=2, sd=1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# testing H0: mu = 0  vs Ha: mu =/= 0
\end_layout

\begin_layout Plain Layout

t  <- ( mean(x) - 0 ) / ( sd(x)/sqrt(n) )
\end_layout

\begin_layout Plain Layout

df <- n-1
\end_layout

\begin_layout Plain Layout

if( t < 0 ){
\end_layout

\begin_layout Plain Layout

  p.value <- 2 * pt(t, df)
\end_layout

\begin_layout Plain Layout

}else{
\end_layout

\begin_layout Plain Layout

  p.value <- 2 * (1-pt(t, df))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# print the resulting p-value
\end_layout

\begin_layout Plain Layout

p.value
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

This sort of logic is necessary for the calculation of p-values and so something
 similar is found somewhere inside the 
\family typewriter
t.test()
\family default
 function.
\end_layout

\begin_layout Standard
When my code expressions in the if/else sections are short, I can use the
 command 
\family typewriter
ifelse()
\family default
 that is a little more space efficient and responds correctly to vectors.
 The syntax is 
\family typewriter
ifelse( logical.expression, TrueValue, FalseValue )
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

x <- 1:10
\end_layout

\begin_layout Plain Layout

ifelse( x <= 5, 'Small Value', 'Large Value')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Loops
\end_layout

\begin_layout Standard
It is often desirable to write code that does the same thing over and over,
 relieving you of the burden of repetitive tasks.
 To do this we'll need a way to tell the computer to repeat some section
 of code over and over.
 However we'll usually want something small to change each time through
 the loop and some way to tell the computer how many times to run the loop
 or when to stop repeating.
\end_layout

\begin_layout Subsection
While Loops
\end_layout

\begin_layout Standard
The basic form of a 
\family typewriter
while
\family default
 loop is as follows:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

# while loop with 1 line
\end_layout

\begin_layout Plain Layout

while( logical )
\end_layout

\begin_layout Plain Layout

  expression
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# while loop with multiple lines to be repeated
\end_layout

\begin_layout Plain Layout

while( logical ){
\end_layout

\begin_layout Plain Layout

  expression1
\end_layout

\begin_layout Plain Layout

  expression2
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The computer will first evaluate the test expression.
 If it is true, it will execute the code once.
 It will then evaluate the test expression again to see if it is still true,
 and if so it will execute the code section a third time.
 The computer will continue with this process until the test expression
 finally evaluates as false.
 
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

x <- 2
\end_layout

\begin_layout Plain Layout

while( x < 100 ){
\end_layout

\begin_layout Plain Layout

  x <- 2*x
\end_layout

\begin_layout Plain Layout

  print(x)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is very common to forget to update the variable used in the test expression.
 In that case the test expression will never be false and the computer will
 never stop.
 This unfortunate situation is called an 
\emph on
infinite loop
\emph default
.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

x <- 1
\end_layout

\begin_layout Plain Layout

while( x < 10 ){
\end_layout

\begin_layout Plain Layout

  print(x)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
For Loops
\end_layout

\begin_layout Standard
Often we know ahead of time exactly how many times we should go through
 the loop.
 We could use a 
\family typewriter
while
\family default
 loop, but there is also a second construct called a 
\family typewriter
for
\family default
 loop that is quite useful.
\end_layout

\begin_layout Standard
The format of a for loop is as follows: 
\family typewriter
for( index in vector ) statement
\family default
 where the 
\family typewriter
index
\family default
 will take on each value in 
\family typewriter
vector
\family default
 in succession and then 
\family typewriter
statement
\family default
 will be evaluated.
 As always, 
\family typewriter
statement
\family default
 can be multiple statements wrapped in curly brackets {}
\family typewriter
.
\family default

\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

for( i in 1:5 ){
\end_layout

\begin_layout Plain Layout

  print(i)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
What is happening is that 
\family typewriter
i
\family default
 starts out as the first element of the vector 
\family typewriter
c(1,2,3,4,5)
\family default
, in this case, 
\family typewriter
i
\family default
 starts out as 1.
 After 
\family typewriter
i
\family default
 is assigned, the statements in the curly brackets are then evaluated.
 Once we get to the end of those statements, 
\family typewriter
i
\family default
 is reassigned to the next element of the vector 
\family typewriter
c(1,2,3,4,5)
\family default
.
 This process is repeated until 
\family typewriter
i
\family default
 has been assigned to each element of the given vector.
 It is somewhat traditional to use 
\family typewriter
i
\family default
 and 
\family typewriter
j
\family default
 and the index variables, but they could be anything.
\end_layout

\begin_layout Standard
We can use this loop to calculate the first 
\begin_inset Formula $10$
\end_inset

 elements of the Fibonacci sequence.
 Recall that the Fibonacci sequence is defined by 
\begin_inset Formula $F_{n}=F_{n-1}+F_{n-2}$
\end_inset

 where 
\begin_inset Formula $F_{1}=0$
\end_inset

 and 
\begin_inset Formula $F_{2}=1$
\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

F <- rep(0, 10)
\end_layout

\begin_layout Plain Layout

F[1] <- 0
\end_layout

\begin_layout Plain Layout

F[2] <- 1
\end_layout

\begin_layout Plain Layout

cat('F = ', F, '
\backslash
n')           # concatenate for pretty output 
\end_layout

\begin_layout Plain Layout

for( n in 3:10 ){
\end_layout

\begin_layout Plain Layout

  F[n] <- F[n-1] + F[n-2]
\end_layout

\begin_layout Plain Layout

  cat('F = ', F, '
\backslash
n') 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For a more statistical case where we might want to perform a loop, we can
 consider the creation of the bootstrap estimate of a sampling distribution.
 We will show how to create the bootstrap sampling distribution using 
\family typewriter
mosaic
\family default
 syntax and using the base R 
\family typewriter
for
\family default
 loop.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ForLoops2, message=FALSE, cache=TRUE>>=
\end_layout

\begin_layout Plain Layout

# mosaic way
\end_layout

\begin_layout Plain Layout

library(mosaic)
\end_layout

\begin_layout Plain Layout

library(dplyr)
\end_layout

\begin_layout Plain Layout

mosaic.SampDist <- do(1000) * {
\end_layout

\begin_layout Plain Layout

  resample(trees) %>% summarise(xbar=mean(Height))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

baseR.SampDist <- data.frame() # Make a vector to store the means 
\end_layout

\begin_layout Plain Layout

for( i in 1:1000 ){
\end_layout

\begin_layout Plain Layout

  temp <- resample(trees) %>% summarise(xbar=mean(Height)) # 1x1 data frame
\end_layout

\begin_layout Plain Layout

  baseR.SampDist[i,'xbar'] <- temp[1,1] 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercises
\end_layout

\begin_layout Enumerate
The 
\begin_inset Formula $Uniform\left(a,b\right)$
\end_inset

 distribution is defined on 
\begin_inset Formula $x\in[a,b]$
\end_inset

 and represents a random variable that takes on any value of between 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 with equal probability.
\begin_inset Foot
status open

\begin_layout Plain Layout
Technically since there are an infinite number of values between 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

, each value has a probability of 0 of being selected and I should say each
 interval of width 
\begin_inset Formula $d$
\end_inset

 has equal probability.
\end_layout

\end_inset

 It has the density function 
\begin_inset Formula 
\[
f\left(x\right)=\begin{cases}
\frac{1}{b-a} & \;\;\;\; a\le x\le b\\
0 & \;\;\;\;\textrm{otherwise}
\end{cases}
\]

\end_inset


\begin_inset Newline newline
\end_inset

The R function 
\family typewriter
dunif()
\begin_inset Newline newline
\end_inset


\family default

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

a <- 4
\end_layout

\begin_layout Plain Layout

b <- 10
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

x <- runif(n=1, 0,10)  # one random value between 0 and 10 
\end_layout

\begin_layout Plain Layout

x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# what is value of f(x) at the randomly selected x value?  
\end_layout

\begin_layout Plain Layout

dunif(x, a, b)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset


\family default
evaluates this density function for the above defined values of 
\family typewriter
x
\family default
, 
\family typewriter
a
\family default
, and 
\family typewriter
b
\family default
.
 Somewhere in that function, there is a chunk of code that evaluates the
 density for arbitrary values of 
\begin_inset Formula $x$
\end_inset

.
 Write a sequence of statements that utilizes an 
\family typewriter
if
\family default
 statements to appropriately calculate the density of 
\family typewriter
x
\family default
 assuming that 
\family typewriter
a
\family default
, 
\family typewriter
b
\family default
 , and 
\family typewriter
x
\family default
 are given to you, but your code won't know if 
\family typewriter
x
\family default
 is between 
\family typewriter
a
\family default
 and 
\family typewriter
b
\family default
.
 That is, your code needs to figure out if it is and give either 
\family typewriter
1/(b-a)
\family default
 or 
\family typewriter
0
\family default
.
\end_layout

\begin_deeper
\begin_layout Enumerate
We could write a set of 
\family typewriter
if/else
\family default
 statements 
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

a <- 4
\end_layout

\begin_layout Plain Layout

b <- 10
\end_layout

\begin_layout Plain Layout

x <- runif(n=1, 0,10)  # one random value between 0 and 10 
\end_layout

\begin_layout Plain Layout

x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if( x < a ){
\end_layout

\begin_layout Plain Layout

  result <- ???
\end_layout

\begin_layout Plain Layout

}else if( x <= b ){
\end_layout

\begin_layout Plain Layout

  result <- ???
\end_layout

\begin_layout Plain Layout

}else{
\end_layout

\begin_layout Plain Layout

  result <- ???
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Replace the 
\family typewriter
???
\family default
 with the appropriate value, either 
\begin_inset Formula $0$
\end_inset

 or 
\begin_inset Formula $1/\left(b-a\right)$
\end_inset

.
\end_layout

\begin_layout Enumerate
We could perform the logical comparison all in one comparison.
 Recall that we can use 
\family typewriter
&
\family default
 to mean 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

 and 
\family typewriter
|
\family default
 to mean 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

.
 In the following two code chunks, replace the 
\family typewriter
???
\family default
 with either 
\family typewriter
&
\family default
 or 
\family typewriter
|
\family default
 to make the appropriate result.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

x <- runif(n=1, 0,10)  # one random value between 0 and 10 
\end_layout

\begin_layout Plain Layout

if( (a<=x) ??? (x<=b) ){
\end_layout

\begin_layout Plain Layout

  result <- 1/(b-a)
\end_layout

\begin_layout Plain Layout

}else{
\end_layout

\begin_layout Plain Layout

  result <- 0
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

x <- runif(n=1, 0,10)  # one random value between 0 and 10 
\end_layout

\begin_layout Plain Layout

if( (x<a) ??? (b<x) ){
\end_layout

\begin_layout Plain Layout

  result <- 0
\end_layout

\begin_layout Plain Layout

}else{
\end_layout

\begin_layout Plain Layout

  result <- 1/(b-a)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

x <- runif(n=1, 0,10)  # one random value between 0 and 10 
\end_layout

\begin_layout Plain Layout

ifelse( a<x & x<b, ???, ??? )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
I often want to repeat some section of code some number of times.
 For example, I might want to create a bunch plots that compare the density
 of a t-distribution with specified degrees of freedom to a standard normal
 distribution.
 
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<fig.height=2.5, fig.width=5>>=
\end_layout

\begin_layout Plain Layout

library(ggplot2)
\end_layout

\begin_layout Plain Layout

df <- 4
\end_layout

\begin_layout Plain Layout

N <- 1000
\end_layout

\begin_layout Plain Layout

x <- seq(-4, 4, length=N)
\end_layout

\begin_layout Plain Layout

data <- data.frame( 
\end_layout

\begin_layout Plain Layout

  x = c(x,x),
\end_layout

\begin_layout Plain Layout

  y = c(dnorm(x), dt(x, df)),
\end_layout

\begin_layout Plain Layout

  type = c( rep('Normal',N), rep('T',N) ) )
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# make a nice graph
\end_layout

\begin_layout Plain Layout

myplot <- ggplot(data, aes(x=x, y=y, color=type, linetype=type)) +
\end_layout

\begin_layout Plain Layout

  geom_line() +
\end_layout

\begin_layout Plain Layout

  labs(title = paste('Std Normal vs t with', df, 'degrees of freedom'))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# actually print the nice graph we made
\end_layout

\begin_layout Plain Layout

print(myplot) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Use a 
\family typewriter
for
\family default
 loop to create similar graphs for degrees of freedom 
\begin_inset Formula $2,3,4,\dots,29,30$
\end_inset

.
 
\end_layout

\begin_layout Enumerate
In retrospect, perhaps we didn't need to produce all of those.
 Rewrite your loop so that we only produce graphs for 
\begin_inset Formula $\left\{ 2,3,4,5,10,15,20,25,30\right\} $
\end_inset

 degrees of freedom.
 
\emph on
Hint: you can just modify the vector in the for statement to include the
 desired degrees of freedom.
\end_layout

\end_deeper
\begin_layout Enumerate
The 
\family typewriter
for
\family default
 loop usually is the most natural one to use, but occasionally we have occasions
 where it is too cumbersome and a different sort of loop is appropriate.
 One example is taking a random sample from a truncated distribution.
 For example, I might want to take a sample from a normal distribution with
 mean 
\begin_inset Formula $\mu$
\end_inset

 and standard deviation 
\begin_inset Formula $\sigma$
\end_inset

 but for some reason need the answer to be larger than zero.
 One solution is to just sample from the given normal distribution until
 I get a value that is bigger than zero.
 
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

mu    <- 0
\end_layout

\begin_layout Plain Layout

sigma <- 1
\end_layout

\begin_layout Plain Layout

x <- rnorm(1, mean=mu, sd=sigma)
\end_layout

\begin_layout Plain Layout

# start the while loop checking if x < 0
\end_layout

\begin_layout Plain Layout

#    generate a new x value
\end_layout

\begin_layout Plain Layout

# end the while loop
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Replace the comments in the above code so that x is a random observation
 from the truncated normal distribution.
\end_layout

\end_body
\end_document
