#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Manipulating Strings
\end_layout

\begin_layout Standard
Strings make up a very important class of data.
 Data being read into R often come in the form of character strings where
 different parts might mean different things.
 For example a sample ID of 
\begin_inset Quotes eld
\end_inset

R1_P2_C1_2012_05_28
\begin_inset Quotes erd
\end_inset

 might represent data from Region 1, Park 2, Camera 1, taken on May 28,
 2012.
 It is important that we have a set of utilities that allow us to split
 and combine character strings in a easy and consistent fashion.
\end_layout

\begin_layout Standard
Unfortunately, the utilities included in the base version of R are somewhat
 inconsistent and were not designed to work nicely together.
 Hadley Wickham, the developer of 
\family typewriter
ggplot2
\family default
 and 
\family typewriter
dplyr
\family default
 has this to say:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Quote
R provides a solid set of string operations, but because they have grown
 organically over time, they can be inconsistent and a little hard to learn.
 Additionally, they lag behind the string operations in other programming
 languages, so that some things that are easy to do in languages like Ruby
 or Python are rather hard to do in R.
 -- Hadley Wickham
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
For this chapter we will introduce the most commonly used functions from
 the base version of R that you might use or see in other people's code.
 Second, we introduce Dr Wickham's 
\family typewriter
stringr
\family default
 package that provides many useful functions that operate in a consistent
 manner.
\end_layout

\begin_layout Section
Base function
\end_layout

\begin_layout Subsection

\family typewriter
\series medium
\size normal
paste()
\end_layout

\begin_layout Standard
The most basic thing we will want to do is to combine two strings or to
 combine a string with a numerical value.
 The 
\family typewriter
paste()
\family default
 command will take one or more R objects and converts them to character
 strings and then pastes them together to form one or more character strings.
 It has the form:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

paste( ..., sep = ' ', collapse = NULL )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

The 
\family typewriter
...

\family default
 piece means that we can pass any number of objects to be pasted together.
 The 
\family typewriter
sep
\family default
 argument gives the string that separates the strings to be joined and the
 
\family typewriter
collapse
\family default
 argument that specifies if a simplification should be performed before
 pasting together.
\end_layout

\begin_layout Standard
Suppose we want to combine the strings 
\begin_inset Quotes eld
\end_inset


\family typewriter
Peanut butter
\begin_inset Quotes erd
\end_inset


\family default
 and 
\family typewriter

\begin_inset Quotes eld
\end_inset

Jelly
\begin_inset Quotes erd
\end_inset


\family default
 then we could execute:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

paste( "PeanutButter", "Jelly" )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Notice that without specifying the separator character, R chose to put a
 space between the two strings.
 We could specify whatever we wanted:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

paste( "Hello", "World", sep='_' )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Also we can combine strings with numerical values
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

paste( "Pi is equal to", pi )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

We can combine vectors of similar or different lengths as well.
 By default R assumes that you want to produce a vector of character strings
 as output.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

paste( "n =", c(5,25,100) )
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

first.names <- c('Robb','Stannis','Daenerys')
\end_layout

\begin_layout Plain Layout

last.names <- c('Stark','Baratheon','Targaryen')
\end_layout

\begin_layout Plain Layout

paste( first.names, last.names)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

If we want 
\family typewriter
paste()
\family default
 produce just a single string of output, use the 
\family typewriter
collapse=
\family default
 argument to first paste together each input vector (separated by the 
\family typewriter
collapse
\family default
 character).
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

paste( paste( "n =", c(5,25,100) ) )
\end_layout

\begin_layout Plain Layout

paste( "n =", c(5,25,100), collapse=':' )
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

paste(first.names, last.names, sep='.', collapse=' : ')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Notice we could use the 
\family typewriter
paste()
\family default
 command with the 
\family typewriter
collapse
\family default
 option to combine a vector of character strings together.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

paste(first.names, collapse=':')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Package 
\family typewriter
stringr
\family default
: basic operations
\end_layout

\begin_layout Standard
The goal of 
\family typewriter
stringr
\family default
 is to make a consistent user interface to a suite of functions to manipulate
 strings.
 
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

(
\family typewriter
stringr
\family default
) is a set of simple wrappers that make R’s string functions more consistent,
 simpler and easier to use.
 It does this by ensuring that: function and argument names (and positions)
 are consistent, all functions deal with NA’s and zero length character
 appropriately, and the output data structures from each function matches
 the input data structures of other functions.” - Hadley Wickham
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

We'll investigate the most commonly used function but there are many we
 will ignore.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Function
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
str_c()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string concatenation, similar to 
\family typewriter
paste()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
str_length()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
number of characters in the string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
str_sub()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
extract a substring
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
str_trim()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
remove leading and trailing whitespace
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
str_pad
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pad a string with empty space to be a designated length
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Concatenating with 
\family typewriter
str_c() or str_join()
\end_layout

\begin_layout Standard
The first thing we do is to concatenate two strings or two vectors of strings
 similarly to the 
\family typewriter
paste()
\family default
 command.
 The 
\family typewriter
str_c()
\family default
 and 
\family typewriter
str_join()
\family default
 functions are a synonym for the exact same function, but 
\family typewriter
str_join()
\family default
 might be a more natural verb to use and remember.
 The syntax is:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

str_join( ..., sep='', collapse=NULL)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can think of the inputs building a matrix of strings, with each input
 creating a column of the matrix.
 For each row, 
\family typewriter
str_join()
\family default
 first joins all the columns (using the separator character given in 
\family typewriter
sep
\family default
) into a single column of strings.
 If the 
\family typewriter
collapse
\family default
 argument is non-
\family typewriter
NULL
\family default
, the function takes the vector and joins each element together using 
\family typewriter
collapse
\family default
 as the separator character.
 
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

# load the stringr library
\end_layout

\begin_layout Plain Layout

library(stringr)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# envisioning the matrix of strings
\end_layout

\begin_layout Plain Layout

cbind(first.names, last.names)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# join the columns together
\end_layout

\begin_layout Plain Layout

full.names <- str_c( first.names, last.names, sep='.')
\end_layout

\begin_layout Plain Layout

cbind( first.names, last.names, full.names)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Join each of the rows together separated by collapse
\end_layout

\begin_layout Plain Layout

str_join( first.names, last.names, sep='.', collapse=' : ')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Calculating string length with 
\family typewriter
str_length()
\end_layout

\begin_layout Standard
The 
\family typewriter
str_length()
\family default
 function calculates the length of each string in the vector of strings
 passed to it.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

text <- c('WordTesting', 'With a space', NA, 'Night')
\end_layout

\begin_layout Plain Layout

str_length( text )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Notice that 
\family typewriter
str_length()
\family default
 correctly interprets the missing data as missing and that the length ought
 to also be missing.
\end_layout

\begin_layout Subsection*
Extracting substrings with 
\family typewriter
str_sub()
\end_layout

\begin_layout Standard
If we know we want to extract the 
\begin_inset Formula $3{}^{rd}$
\end_inset

 through 
\begin_inset Formula $6^{th}$
\end_inset

 letters in a string, this function will grab them.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

str_sub(text, start=3, end=6)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

If a given string isn't long enough to contain all the necessary indices,
 
\family typewriter
str_sub()
\family default
 returns only the letters that where there (as in the above case for 
\family typewriter

\begin_inset Quotes eld
\end_inset

Night
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection*
Pad a string with 
\family typewriter
str_pad()
\end_layout

\begin_layout Standard
Sometimes we to make every string in a vector the same length to facilitate
 display or in the creation of a uniform system of assigning ID numbers.
 The 
\family typewriter
str_pad()
\family default
 function will add spaces at either the beginning or end of the of every
 string appropriately.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

str_pad(first.names, width=8)
\end_layout

\begin_layout Plain Layout

str_pad(first.names, width=8, side='right', pad='*')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Trim a string with str_trim()
\end_layout

\begin_layout Standard
This removes any leading or trailing whitespace where whitespace is defined
 as spaces 
\family typewriter
' '
\family default
, tabs 
\family typewriter
'
\backslash
t'
\family default
, or returns 
\family typewriter
'
\backslash
n'
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

text <- ' Some text.
 
\backslash
n  '
\end_layout

\begin_layout Plain Layout

print(text)
\end_layout

\begin_layout Plain Layout

str_trim(text)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Package 
\family typewriter
stringr:
\family default
 Pattern Matching
\end_layout

\begin_layout Standard
The previous commands are all quite useful but the most powerful string
 operation is take a string and match some pattern within it.
 The following commands are available within 
\family typewriter
stringr
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="right" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Function
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
str_detect()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Detect if a pattern occurs in the input string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
str_locate()
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Locates the first (or all) position(s) of a pattern
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
str_locate_all()
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
str_extract()
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extracts the first (or all) substrings corresponding to a pattern 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
str_extract_all()
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
str_replace()
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Replaces the matched substrings with a new pattern
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
str_replace_all()
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
str_split()
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Splits the input string based on the input pattern
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
str_split_fixed()
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We will first examine these functions using a very simple pattern matching
 algorithm where we are matching a specific pattern.
 For most people, this is as complex as we need.
 The next section will introduce using regular expressions
\begin_inset Foot
status open

\begin_layout Plain Layout
Regular expressions are a way to specify very complicated patterns.
 Go look at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://xkcd.com/208/
\end_layout

\end_inset

 to gain insight into just how geeky regular expressions are.
\end_layout

\end_inset

 in these functions.
 Suppose that we have a vector of strings that contain a date in the form
 
\family typewriter

\begin_inset Quotes eld
\end_inset

2012-May-27
\begin_inset Quotes erd
\end_inset


\family default
 and we want to manipulate them to extract certain information.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

test.vector <- c('2008-Feb-10', '2010-Sept-18', '2013-Jan-11', '2016-Jan-2')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Detecting a pattern using 
\family typewriter
str_detect()
\end_layout

\begin_layout Standard
Suppose we want to know which dates are in September.
 We want to detect if the pattern 
\family typewriter

\begin_inset Quotes eld
\end_inset

Sept
\begin_inset Quotes erd
\end_inset


\family default
 occurs in the strings.
 It is important that I used 
\family typewriter
fixed(
\begin_inset Quotes eld
\end_inset

Sept
\begin_inset Quotes erd
\end_inset

)
\family default
 in this code to 
\begin_inset Quotes eld
\end_inset

turn off
\begin_inset Quotes erd
\end_inset

 the complicated regular expression matching rules and just look for exactly
 what I specified.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

str_detect( test.vector, pattern=fixed('Sept') )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Here we see that the second string in the test vector included the substring
 
\family typewriter

\begin_inset Quotes eld
\end_inset

Sept
\begin_inset Quotes erd
\end_inset


\family default
 but none of the others did.
\end_layout

\begin_layout Subsection*
Locating a pattern using 
\family typewriter
str_locate()
\end_layout

\begin_layout Standard
To figure out where the 
\family typewriter

\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset


\family default
 characters are, we can use the 
\family typewriter
str_locate()
\family default
 function.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

str_locate(test.vector, pattern=fixed('-') )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

which shows that the first dash occurs as the 
\begin_inset Formula $5^{th}$
\end_inset

 character in each string.
 If we wanted all the dashes in the string the following works.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

str_locate_all(test.vector, pattern=fixed('-') )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

The output of 
\family typewriter
str_locate_all()
\family default
 is a list of matrices that gives the start and end of each matrix.
 Using this information, we could grab the Year/Month/Day information out
 of each of the dates.
 We won't do that here because it will be easier to do this using 
\family typewriter
str_split()
\family default
.
\end_layout

\begin_layout Subsection*
Replacing substrings using 
\family typewriter
str_replace()
\end_layout

\begin_layout Standard
Suppose we didn't like using 
\family typewriter

\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset


\family default
 to separate the Year/Month/Day but preferred a space, or an underscore,
 or something else.
 This can be done by replacing all of the 
\family typewriter

\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset


\family default
 with the desired character.
 The 
\family typewriter
str_replace()
\family default
 function only replaces the first match, but 
\family typewriter
str_replace_all()
\family default
 replaces all matches.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

str_replace(test.vector, pattern=fixed('-'), replacement=fixed(':') )
\end_layout

\begin_layout Plain Layout

str_replace_all(test.vector, pattern=fixed('-'), replacement=fixed(':') )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Splitting into substrings using 
\family typewriter
str_split()
\end_layout

\begin_layout Standard
We can split each of the dates into three smaller substrings using the 
\family typewriter
str_split()
\family default
 command, which returns a list where each element of the list is a vector
 containing pieces of the original string (excluding the pattern we matched
 on).
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

str_split(test.vector, pattern=fixed('-'))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

If we know that all the strings will be split into a known number of substrings
 (we have to specify how many substrings to match), we can use 
\family typewriter
str_split_fixed()
\family default
 to get a matrix of substrings instead of list of substrings.
 It is somewhat unfortunate that the 
\family typewriter
_fixed
\family default
 modifier to the function name is the same as what we use to specify to
 use simple pattern matching.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

str_split_fixed(test.vector, pattern=fixed('-'), n=3)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Regular Expressions
\end_layout

\begin_layout Standard
Regular expressions are a way of precisely writing out patterns that are
 very complicated.
 The 
\family typewriter
stringr
\family default
 package 
\family typewriter
pattern
\family default
 arguments can be given using standard regular expressions (not perl-style!)
 instead of using fixed strings.
\end_layout

\begin_layout Standard
Regular expressions are extremely powerful for sifting through large amounts
 of text.
 For example, we might want to extract all of the 4 digit substrings (the
 years) out of our dates vector, or I might want to find all cases in a
 paragraph of text of words that begin with a capital letter and are at
 least 5 letters long.
 In another, somewhat nefarious example, spammers might have downloaded
 a bunch of text from webpages and want to be able to look for email addresses.
 So as a first pass, they want to match a pattern:
\begin_inset Formula 
\[
\underset{\textrm{1 or more letters}}{\underbrace{\texttt{Username}}}\texttt{@}\;\;\underset{\textrm{1 or more letter}}{\underbrace{\texttt{OrganizationName}}}\;\texttt{.\;}\begin{cases}
\texttt{com}\\
\texttt{org}\\
\texttt{edu}
\end{cases}
\]

\end_inset

where the 
\family typewriter
Username
\family default
 and 
\family typewriter
OrganizationName
\family default
 can be pretty much anything, but a valid email address looks like this.
 We might get even more creative and recognize that my list of possible
 endings could include country codes as well.
 
\end_layout

\begin_layout Standard
For most people, I don't recommend opening the regular expression can-of-worms,
 but it is good to know that these pattern matching utilities are available
 within R and you don't need to export your pattern matching problems to
 Perl or Python.
\end_layout

\begin_layout Section
Exercises
\end_layout

\begin_layout Enumerate
Using the 
\family typewriter
test.vector
\family default
 of dates given in the text, create a vector of the years using 
\family typewriter
stringr
\family default
 functions.
\end_layout

\begin_layout Enumerate
The following file names were used in a camera trap study.
 The 
\family typewriter
S
\family default
 number represents the site, 
\family typewriter
P
\family default
 is the plot within a site, 
\family typewriter
C
\family default
 is the camera number within the plot, the first string of numbers is the
 YearMonthDay and the second string of numbers is the HourMinuteSecond.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

file.names <- c( 'S123.P2.C10_20120621_213422.jpg',
\end_layout

\begin_layout Plain Layout

                 'S10.P1.C1_20120622_050148.jpg',
\end_layout

\begin_layout Plain Layout

                 'S187.P2.C2_20120702_023501.jpg')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Use a combination of 
\family typewriter
str_sub()
\family default
 and 
\family typewriter
str_split
\family default
() to produce a data frame with columns corresponding to the site, plot,
 camera, year, month, day, hour, minute, and second for these three file
 names.
 So we want to produce code that will create the data frame:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=FALSE, message=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(dplyr)
\end_layout

\begin_layout Plain Layout

Result <- data.frame( file = file.names )
\end_layout

\begin_layout Plain Layout

Result <- Result %>%
\end_layout

\begin_layout Plain Layout

  mutate( SiteInfo = str_split_fixed(file, fixed('_'), n=3)[,1],
\end_layout

\begin_layout Plain Layout

          DateInfo = str_split_fixed(file, fixed('_'), n=3)[,2],
\end_layout

\begin_layout Plain Layout

          TimeInfo = str_split_fixed(file, fixed('_'), n=3)[,3] ) %>%
\end_layout

\begin_layout Plain Layout

  mutate( Site   = str_split_fixed(SiteInfo, fixed('.'), n=3)[,1],
\end_layout

\begin_layout Plain Layout

          Plot   = str_split_fixed(SiteInfo, fixed('.'), n=3)[,2],
\end_layout

\begin_layout Plain Layout

          Camera = str_split_fixed(SiteInfo, fixed('.'), n=3)[,3],
\end_layout

\begin_layout Plain Layout

          Year   = str_sub(DateInfo, 1,4),
\end_layout

\begin_layout Plain Layout

          Month  = str_sub(DateInfo, 5,6),
\end_layout

\begin_layout Plain Layout

          Day    = str_sub(DateInfo, 7,8),
\end_layout

\begin_layout Plain Layout

          Hour   = str_sub(TimeInfo, 1,2),
\end_layout

\begin_layout Plain Layout

          Minute = str_sub(TimeInfo, 3,4),
\end_layout

\begin_layout Plain Layout

          Second = str_sub(TimeInfo, 5,6) )
\end_layout

\begin_layout Plain Layout

select(Result, Site, Plot, Camera, Year, Month, Day, Hour, Minute, Second)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\emph on
Hint: Split the file names first by the underscore, and save the resulting
 three pieces as SiteInfo, DateInfo and TimeInfo and then further break
 each of those apart in whatever way is appropriate.
\end_layout

\end_body
\end_document
