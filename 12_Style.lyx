#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Style
\end_layout

\begin_layout Standard
Coding is a skill that seems difficult and arcane and accessible to only
 the geekiest of individuals slaving away in dark rooms.
 In part this is because many students practice poor habits that result
 in code that has no large-scale structure, little fine scale consistency,
 and is incomprehensible to anyone other than the author (and only on the
 day it was written).
 Your goal when writing code shouldn't simply be to write code that runs
 and does what you want, but rather you should aim to write code that is
 easily read.
\end_layout

\begin_layout Standard
In the United States, driving an automobile is typically safe and efficient
 mode of transportation, but it is only because all drivers are required
 to obey a set of conventions that are mutually agreed upon
\begin_inset Note Note
status open

\begin_layout Plain Layout
Certain agreements are enforced by law, and others are acknowledged convention.
\end_layout

\end_inset

 It turns out that there are conventions in how you organize your code so
 that people reading your code know what to expect and are not surprised
 when you do something.
 These conventions are in place not only to help others read your code,
 but also to 
\emph on
help you write code that is easy to debug
\emph default
.
 Just as I always put my keys, wallet, and phone is exactly the same spot
 when I get home at night to avoid losing them, indenting code, commenting
 tricky bits of code, and using functions and loops whenever possible keeps
 me from introducing tiny bugs in my code that are impossible to find.
\end_layout

\begin_layout Standard
In short, good programming style exists to make writing code look easy and
 to be less stressful.
\end_layout

\begin_layout Section
Small Scale Conventions
\end_layout

\begin_layout Subsection
Variable Names
\end_layout

\begin_layout Standard
Your choice of variable names should strike a balance between excessively
 long names that are annoying to type versus short variable names that don't
 mean anything.
 Consider the data frame included by the 
\family typewriter
mosaicData
\family default
 package 
\family typewriter
Gestation
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

library(mosaicData)
\end_layout

\begin_layout Plain Layout

data(Gestation)
\end_layout

\begin_layout Plain Layout

?Gestation
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

This is a dataset that contains information about gestation length of a
 baby (in days) along with information about the mother and father.
 Several of the covariates have very good names while some are very bad.
 The goal should be for a reader to know exactly how a variable is name
 by guessing.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="5cm">
<column alignment="center" valignment="top" width="3cm">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Variable Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comment
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alternative
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
gestation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length of gestation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ok
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
date of birth
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ok
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
sex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sex of infant
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ok
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
age
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mother's age
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inconsistent with father naming scheme
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
m.age
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
dage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Father's age
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No split between dad and age.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
d.age
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
wt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Infants weight
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
While weight is often abbreviated as wt, this might be too terse
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
weight
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
wt.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mother's weight
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing implies that it is the mother's weight
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
m.weight
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of cigarettes smoked per day
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nothing implies it relates to cigarettes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
m.num.cigarettes
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

The last variable is possibly too long and it might be better to name it
 
\family typewriter
m.num.cig
\family default
 for brevity.
\end_layout

\begin_layout Standard
Finally, I recommend that data sets be name using an initial capital letter
 
\family typewriter
Gestation
\family default
 is the data set and 
\family typewriter
gestation
\family default
 is a column within the dataset.
\end_layout

\begin_layout Standard
There are several different conventions you could use for variable names
 that are combinations of two or more words.
 The choice between the following two conventions is mostly cosmetic but
 you should pick one convention and stick with it as closely as possible.
\end_layout

\begin_layout Enumerate
Join by dots.
 We could have a variable name 
\family typewriter
my.example.variable
\family default
.
 A variant of this would be to use underscores instead.
 R has traditionally used dots and that is the preferred way, but if your
 code interacts with C++ code, then the dots are bad and underscores are
 preferred.
\end_layout

\begin_layout Enumerate
Camel humps.
 The variable would be 
\family typewriter
myExampleVariable
\end_layout

\begin_layout Subsection
Indentation
\end_layout

\begin_layout Subsubsection*
Loops
\end_layout

\begin_layout Standard
The code being executed by a loop should be indented so that it is clear
 to the reader what code is being executed inside the loop.
 Consider the following command:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

x <- rnorm(20, mu=2, sd=2)
\end_layout

\begin_layout Plain Layout

sampleDist <- rep(NA, 1000)
\end_layout

\begin_layout Plain Layout

for( i in 1:1000){
\end_layout

\begin_layout Plain Layout

bootData <- resample( x )
\end_layout

\begin_layout Plain Layout

sampleDist[i] <- mean( bootData )}
\end_layout

\begin_layout Plain Layout

hist(sampleDist)
\end_layout

\begin_layout Plain Layout

mean(sampleDist)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

It is actually quite difficult to figure out where the for loop ends because
 the only signifier is that closing 
\family typewriter
}
\family default
.
 A more readable version of this code would be as follows:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

x <- rnorm(20, mu=2, sd=2)
\end_layout

\begin_layout Plain Layout

sampleDist <- rep(NA, 1000)
\end_layout

\begin_layout Plain Layout

for( i in 1:1000 ){
\end_layout

\begin_layout Plain Layout

  bootData <- resample( x )
\end_layout

\begin_layout Plain Layout

  sampleDist[i] <- mean( bootData )
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

hist(sampleDist)
\end_layout

\begin_layout Plain Layout

mean(sampleDist)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

This is more readable because the indentation separates what code get repeated
 and the 
\family typewriter
}
\family default
 on its own line tells the reader that the loop is ended.
\end_layout

\begin_layout Subsubsection*
Multi-line commands
\end_layout

\begin_layout Standard
Commands that stretch over multiple lines should be arranged so as to let
 the reader know that it is one command.
 Consider
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

FakeData <- data.frame( y = c(2, 3, 5,
\end_layout

\begin_layout Plain Layout

7, 8), color=c('Red','Red','Red','Blue','Green'), major=c(
\end_layout

\begin_layout Plain Layout

'Forestry','Biology','Math','Math','Forestry'))
\end_layout

\begin_layout Plain Layout

ggplot(FakeData, aes(x=major, y=y)) + geom_point()
\end_layout

\begin_layout Plain Layout

result <- FakeData %>% group_by(color) %>% summarize(mean.y = mean(y))
\end_layout

\begin_layout Plain Layout

result
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

This code is hard to read because there are multiple lines of code that
 are too long and contain distinct steps.
 Ideally each distinct step of those should be on its own line.
 A blank line between each individual multi-line statement can also be aesthetic
ally pleasing.
 A better organized version of this code is:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

FakeData <- data.frame( 
\end_layout

\begin_layout Plain Layout

  y = c(2, 3, 5, 7, 8), 
\end_layout

\begin_layout Plain Layout

  color=c('Red','Red','Red','Blue','Green'), 
\end_layout

\begin_layout Plain Layout

  major=c('Forestry','Biology','Math','Math','Forestry'))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ggplot(FakeData, aes(x=major, y=y)) + 
\end_layout

\begin_layout Plain Layout

  geom_point()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

result <- FakeData %>% 
\end_layout

\begin_layout Plain Layout

  group_by(color) %>% 
\end_layout

\begin_layout Plain Layout

  summarize(mean.y = mean(y))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

result
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Medium Scale Conventions
\end_layout

\begin_layout Standard
Often when you find yourself writing R code, it is tempting to grab a piece
 of code you've already written and just copy-and-paste the code and make
 a minor tweek.
 If possible, I encourage you to not do this because inevitably you will
 end up with 20 versions of the code that are slightly different and when
 you discover you want to modify all of them (due to an error or wanting
 to make something a little nicer) you can't possibly make all those changes
 without introducing an error.
 Whenever you find yourself wanting to copy and paste, ask yourself if you
 could write a loop or a function instead.
\end_layout

\end_body
\end_document
